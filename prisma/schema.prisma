generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserStatus {
  ACTIVE
  INACTIVE
}

enum EEnviroment {
  MAINNET
  TESTNET
}

enum EMethod {
  AUTO_GENERATE
  BRING_YOUR_OWN
}

enum ERequestStatus {
  PENDING
  SUCCESS
  ERROR
}

enum ETenantStatus {
  ACTIVE
  INACTIVE
}

model User {
  id            String       @id @default(uuid())
  email         String      @db.VarChar(255)
  password      String       @db.VarChar(255)
  mfaSecret     String?      @db.VarChar(255)
  emailVerified Boolean      @default(false)
  googleUid     String?      @db.VarChar(255)
  facebookUid   String?      @db.VarChar(255)
  timezone      String       @default("GMT+8") @db.VarChar(255)
  status        EUserStatus  @default(ACTIVE)
  tenants       UserTenant[]
  resetKeyRequest ResetKeyRequest[]
  profile       UserProfile?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("user")
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password-history")
}

model UserToken {
  id           String   @id @default(uuid())
  userId       String   @db.Uuid
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user-token")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String   @default("") @db.VarChar(255)
  avatar    String   @default("") @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-profile")
}

model UserTenant {
  id         String      @id @default(uuid())
  userId     String
  custonomyUserId  String
  users      User        @relation(fields: [userId], references: [id])
  tenantId   String
  signNodeId String
  env        EEnviroment @default(TESTNET)
  status     ETenantStatus
  method     EMethod
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("user-tenant")
}

model ResetKeyRequest {
  id           String   @id @default(uuid())
  userId       String
  user         User @relation(fields: [userId], references: [id])
  projectId    String
  status       ERequestStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("reset-key-request")
}